// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using irregation_api.Data;

#nullable disable

namespace irregation_api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230412063519_newMigration")]
    partial class newMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("irregation_api.Entity.IrregationScheduleEntity", b =>
                {
                    b.Property<int>("IrregationScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Activated")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DateFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateTo")
                        .HasColumnType("TEXT");

                    b.Property<double>("Duration")
                        .HasColumnType("REAL");

                    b.Property<int>("SensorEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("IrregationScheduleId");

                    b.HasIndex("SensorEntityId");

                    b.ToTable("IrregationSchedules");
                });

            modelBuilder.Entity("irregation_api.Entity.SensorEntity", b =>
                {
                    b.Property<int>("SensorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Humidity")
                        .HasColumnType("REAL");

                    b.Property<double>("HumidityThreshold")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("LastActive")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Mac")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("State")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Temperature")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double?>("WaterUsedAll")
                        .HasColumnType("REAL");

                    b.Property<double?>("WaterUsedLast")
                        .HasColumnType("REAL");

                    b.HasKey("SensorId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("irregation_api.Entity.UserEntity", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("irregation_api.Entity.IrregationScheduleEntity", b =>
                {
                    b.HasOne("irregation_api.Entity.SensorEntity", "SensorEntity")
                        .WithMany("IrregationScheduleEntitys")
                        .HasForeignKey("SensorEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SensorEntity");
                });

            modelBuilder.Entity("irregation_api.Entity.SensorEntity", b =>
                {
                    b.HasOne("irregation_api.Entity.UserEntity", "UserEntity")
                        .WithMany("SensorEntitys")
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("irregation_api.Entity.SensorEntity", b =>
                {
                    b.Navigation("IrregationScheduleEntitys");
                });

            modelBuilder.Entity("irregation_api.Entity.UserEntity", b =>
                {
                    b.Navigation("SensorEntitys");
                });
#pragma warning restore 612, 618
        }
    }
}
